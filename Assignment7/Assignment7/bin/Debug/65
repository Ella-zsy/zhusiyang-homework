<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-cross-origin" />
    <meta name="description" content="事情要回顾到双11.11备战前夕，在那个风雨交加的夜晚，一个急促的咚咚报警，惊破了电闪雷鸣的黑夜，将沉浸在梦香，熟睡的我惊醒。" />
    <meta property="og:description" content="事情要回顾到双11.11备战前夕，在那个风雨交加的夜晚，一个急促的咚咚报警，惊破了电闪雷鸣的黑夜，将沉浸在梦香，熟睡的我惊醒。" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>长连接Netty服务内存泄漏，看我如何一步步捉“虫”解决 - 京东云技术团队 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=1vhSwkIM_ZbH7FoBJEmvwqf4uVSvVLle9uQMPlPtd_s" />
    

    <link id="MainCss" rel="stylesheet" href="/skins/lessismoreright/bundle-lessismoreright.min.css?v=jCa45SoodIrmNIWg5OOQ4J9KdJxbHTH5xUcbSPK8mGU" />
        <link id="highlighter-theme-cnblogs" type="text/css" rel="stylesheet" href="/css/hljs/cnblogs.css?v=5J1NDtbnnIr2Rc2SdhEMlMxD4l9Eydj88B31E7_NhS4" />
    
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/lessismoreright/bundle-lessismoreright-mobile.min.css?v=Jh4f782OH7Kol9ZM4ZBuYmOlQ1ywvXIza_q1BuQ_5vo" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/jingdongkeji/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/jingdongkeji/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/jingdongkeji/wlwmanifest.xml" />
    <script>
        var currentBlogId = 777127;
        var currentBlogApp = 'jingdongkeji';
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'LessIsMoreRight';
        var visitorUserId = '';
        var hasCustomScript = false;
        try {
            if (hasCustomScript && document.referrer && document.referrer.indexOf('baidu.com') >= 0) {
                Object.defineProperty(document, 'referrer', { value: '' });
                Object.defineProperty(Document.prototype, 'referrer', { get: function () { return ''; } });
            }
        } catch (error) { }
        window.cb_enable_mathjax = true;
        window.mathEngine = 1;
        window.codeHighlightEngine = 1;
        window.enableCodeLineNumber = false;
        window.codeHighlightTheme = 'cnblogs';
        window.darkModeCodeHighlightTheme = 'vs2015';
        window.isDarkCodeHighlightTheme = false;
        window.isDarkModeCodeHighlightThemeDark = true;
        window.isDisableCodeHighlighter = false;
        window.enableCodeThemeTypeFollowSystem = false;
        window.enableMacStyleCodeBlock = false
    </script>
        <script>
            var currentPostDateAdded = '2023-04-23 09:33';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=QEG6LwSL2qZPG7UFsn5haCBlDMZ9Yzj6bWHw2T_YuXU"></script>
    

    
</head>
<body class="skin-lessismoreright has-navbar mathjax3">
    <a name="top"></a>
        <div id="bannerbar" class="bannerbar-mobile bannerbar-text-mobile formobile">
                <a href="https://www.cnblogs.com/cmt/p/17320765.html" onclick="countCreativeClicks('M2-博客园')">
                    园子的商业化努力-困境求助：开设捐助通道
                </a>                
        </div>
    <div id="top_nav" class="navbar forpc">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding">
                    <a href="https://www.cnblogs.com/" title="开发者的网上家园" role="banner">
                            <img src="//common.cnblogs.com/logo.svg" alt="博客园Logo" />
                    </a>
                </li>
                <li>
                    <a href="/" onclick="countClicks('skin-navbar-sitehome')">首页</a>
                </li>
                <li>
                    <a href="https://news.cnblogs.com/" onclick="countClicks('nav', 'skin-navbar-news')">新闻</a>
                </li>
                <li>
                    <a href="https://q.cnblogs.com/" onclick="countClicks('nav', 'skin-navbar-q')">博问</a>
                </li>
                    <li><a href="https://www.cnblogs.com/cmt/p/17320765.html" target="_blank">助园</a></li>
                <li>
                    <a href="https://ing.cnblogs.com/" onclick="countClicks('nav', 'skin-navbar-ing')">闪存</a>
                </li>
                <li>
                    <a href="https://edu.cnblogs.com/" onclick="countClicks('nav', 'skin-navbar-edu')">班级</a>
                </li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search dropdown" action="https://zzk.cnblogs.com/s" method="get" role="search">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="search" tabindex="3" autocomplete="off" />
                        <button id="zzk_search_button" onclick="window.navbarSearchManager.triggerActiveOption()">
                            <img id="search_icon" class="focus-hidden" src="//common.cnblogs.com/images/blog/search.svg" alt="搜索" />
                            <img class="hidden focus-visible" src="/images/enter.svg" alt="搜索" />
                        </button>
                        <ul id="navbar_search_options" class="dropdown-menu quick-search-menu">
                            <li tabindex="0" class="active" onclick="zzkSearch(event, document.getElementById('zzk_search_input').value)">
                                <div class="keyword-wrapper">
                                    <img src="//common.cnblogs.com/images/blog/search.svg" alt="搜索" />
                                    <div class="keyword"></div>
                                </div>
                                <span class="search-area">所有博客</span>
                            </li>
                                    <li tabindex="1" onclick="zzkBlogSearch(event, 'jingdongkeji', document.getElementById('zzk_search_input').value)">
                                        <div class="keyword-wrapper">
                                            <img src="//common.cnblogs.com/images/blog/search.svg" alt="搜索" />
                                            <div class="keyword"></div>
                                        </div>
                                        <span class="search-area">当前博客</span>
                                    </li>
                        </ul>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="//common.cnblogs.com/images/blog/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="//common.cnblogs.com/images/blog/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="//common.cnblogs.com/images/blog/message.svg" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <a id="navbar_lite_mode_indicator" data-current-page="blog" style="display: none" href="javascript:void(0)" alt="简洁模式" title="简洁模式启用，您在访问他人博客时会使用简洁款皮肤展示">
                        <img class="navbar-icon" src="//common.cnblogs.com/images/blog/lite-mode-on.svg" alt="简洁模式" />
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="//common.cnblogs.com/images/blog/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    

    <div id="home">
    <div id="header">
        <div id="blogTitle">
            <div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/jingdongkeji/">jingdongkeji</a>
</div>
<div class="subtitle"></div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/jingdongkeji/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E4%BA%AC%E4%B8%9C%E4%BA%91%E6%8A%80%E6%9C%AF%E5%9B%A2%E9%98%9F">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/jingdongkeji/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                <div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/jingdongkeji/p/17345525.html">
    <span role="heading" aria-level="2">长连接Netty服务内存泄漏，看我如何一步步捉“虫”解决</span>
    
</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2023.cnblogs.com/blog/3046120/202304/3046120-20230423093208487-798754184.png" alt="长连接Netty服务内存泄漏，看我如何一步步捉“虫”解决" class="desc_img" />
        事情要回顾到双11.11备战前夕，在那个风雨交加的夜晚，一个急促的咚咚报警，惊破了电闪雷鸣的黑夜，将沉浸在梦香，熟睡的我惊醒。
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p>作者：京东科技 王长春</p>
<h1 id="背景">背景</h1>
<p>事情要回顾到双11.11备战前夕，在那个风雨交加的夜晚，一个急促的咚咚报警，惊破了电闪雷鸣的黑夜，将沉浸在梦香，熟睡的我惊醒。</p>
<p>一看手机咚咚报警，不好！有大事发生了！电话马上打给老板：</p>
<blockquote>
<p>老板说： 长连接吗?<br>
我说：是的！<br>
老板说：该来的还是要来的，最终还是来了，快，赶紧先把服务重启下！<br>
我说：已经重启了！<br>
老板说： 这问题必须给我解决了！<br>
我说：必须的！</p>
</blockquote>
<p><strong>线上应用长连接Netty服务出现内存泄漏了！真让人头大</strong></p>
<p>在这风雨交加的夜晚，此时，面对毫无头绪的问题，以及迫切想攻克问题的心，已经让我兴奋不已，手一把揉揉刚还迷糊的眼，今晚又注定是一个不眠之夜！</p>
<h1 id="应用介绍">应用介绍</h1>
<p><strong>说起支付业务的长连接服务，真是说来话长，我们这就长话短说</strong>：</p>
<p>随着业务及系统架构的复杂化，一些场景，用户操作无法同步得到结果。一般采用的短连接轮训的策略，客户端需要不停的发起请求，时效性较差还浪费服务器资源。</p>
<p><strong>短轮训痛点:</strong></p>
<ul>
<li>时效性差</li>
<li>耗费服务器性能</li>
<li>建立、关闭链接频繁</li>
</ul>
<p>相比于短连接轮训策略，长连接服务可做到实时推送数据，并且在一个链接保持期间可进行多次数据推送。服务应用常见场景：PC端扫码支付，用户打开扫码支付页面，手机扫码完成支付，页面实时展示支付成功信息，提供良好的用户体验。</p>
<p><strong>长连服务优势:</strong></p>
<ul>
<li>时效性高提升用户体验</li>
<li>减少链接建立次数</li>
<li>一次链接多次推送数据</li>
<li>提高系统吞吐量</li>
</ul>
<p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-04-17-18-20kcRIzB17akdHjzbz.png" alt="长连接服务系统架构" loading="lazy"></p>
<p>这个长连接服务使用<code>Netty</code>框架，<code>Netty</code>的高性能为这个应用带来了无上的荣光，承接了众多长连接使用场景的业务：</p>
<ul>
<li>PC收银台微信支付</li>
<li>声波红包</li>
<li>POS线下扫码支付</li>
</ul>
<h1 id="问题现象">问题现象</h1>
<p>回到线上问题，出现内存泄漏的是长连接前置服务，观察线上服务，这个应用的内存泄漏的现象总伴随着内存的增长，<strong>这个增长真是非常的缓慢，缓慢，缓慢，2、3个月内从30%慢慢增长到70%，极难发现</strong>：</p>
<p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-04-16-21-149nE16TM7fgGVkTrG.png" alt="应用实例的内存总是在缓慢的增长" loading="lazy"></p>
<p>每次发生内存泄漏，内存快耗尽时，总得重启下，<strong>虽说重启是最快解决的方法，但是程序员是天生懒惰的，要数着日子来重启，那绝对不是一个优秀程序员的行为！问题必须彻底解决！</strong></p>
<h1 id="问题排查与复现">问题排查与复现</h1>
<h2 id="排查">排查</h2>
<p>遇到问题，毫无头绪，首先还是需要去案发第一现场，排查“死者(应用实例)”死亡现场，通过在发生FullGC的时间点，通过Digger查询<code>ERROR</code>日志，没想到还真找到破案的第一线索:</p>
<p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-04-16-17-51Jq6kMlr7lOnHY9b.png" alt="线上出现问题日志" loading="lazy"></p>
<pre><code>io.netty.util.ResourceLeakDetector [176] - LEAK: ByteBuf.release() was not called before it's garbage-collected. Enable advanced leak reporting to find out where the leak occurred. To enable advanced leak reporting, specify the JVM option '-Dio.netty.leakDetection.level=advanced' or call ResourceLeakDetector.setLevel() See http://netty.io/wiki/reference-counted-objects.html for more information.

</code></pre>
<p>线上日志竟然有一个明显的<code>"LEAK"</code>泄漏字样，作为技术人的敏锐的技术嗅觉，和找Bug的直觉，可以确认，这就是事故案发第一现场。</p>
<p>我们凭借下大学四六级英文水平的，继续翻译下线索，原来是这呐！</p>
<blockquote>
<p>ByteBuf.release（） 在垃圾回收之前没有被调用。启用高级泄漏报告以找出泄漏发生的位置。要启用高级泄漏报告，请指定 JVM 选项“-Dio.netty.leakDetectionLevel=advanced”或调用 ResourceLeakDetector.setLevel（）</p>
</blockquote>
<p>啊哈！这信息不就是说了嘛！<code>ByteBuf.release（）</code>在垃圾回收前没有调用，有<code>ByteBuf</code>对象没有被释放，<code>ByteBuf</code>可是分配在直接内存的，没有被释放，那就意味着堆外内存泄漏，所以内存一直是非常缓慢的增长，GC都不能够进行释放。</p>
<p>提供了这个线索，那到底是我们应用中哪段代码出现了<code>ByteBuf</code>对象的内存泄漏呢？<br>
项目这么大，Netty通信处理那么多，怎么找呢？自己从中搜索，那肯定是不靠谱，找到了又怎么释放呢？</p>
<h2 id="复现">复现</h2>
<p>面对这一连三问？别着急，Netty的日志提示还是非常完善：<strong>启用高级泄漏报告找出泄漏发生位置</strong>嘛，生产上不可能启用，并且生产发生时间极长，时间上来不及，而且未经验证，不能直接生产发布，那就本地代码复现一下！找到具体代码位置。</p>
<p>为了本地复现<code>Netty</code>泄漏，定位详细的内存泄漏代码，我们需要做这几步：</p>
<p>1、配置足够小的本地JVM内存，以便快速模拟堆外内存泄漏。<br>
如图，我们设置设置PermSize=30M, MaxPermSize=43M<br>
<img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-04-19-07-09sbE19ewmiitQnj0V.png" alt="IDEA配置本地JVM内存" loading="lazy"></p>
<p>2、模拟足够多的长连接请求，我们使用Postman定时批量发请求，以达到服务的堆外内存泄漏。</p>
<p>启动项目，通过<code>JProfiler</code>JVM监控工具，我们观察到内存缓慢的增长，最终触发了本地<code>Netty</code>的堆外内存泄漏，本地复现成功：</p>
<p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-04-21-12-50QdMb9gzUYNGBk6A.png" alt="JProfilerJVM监控" loading="lazy"></p>
<p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-04-16-17-497wFXiKiOfNWJMe5.png" alt="复现线上生产问题" loading="lazy"></p>
<p>_<strong>那问题具体出现在代码中哪块呢？</strong>_我们最重要的是定位具体代码，在开启了<code>Netty</code>的高级内存泄漏级别为高级，来定位下：</p>
<p>3、开启<code>Netty</code>的高级内存泄漏检测级别，JVM参数如下：<br>
<code>-Dio.netty.leakDetectionLevel=advanced</code></p>
<p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-04-19-07-10CrT19ZTexlksgDCW.png" alt="IDEA配置本地JVM内存-增加DIO" loading="lazy"></p>
<p>再启动项目，模拟请求，达到本地应用JVM内存泄漏，Netty输出如下具体日志信息，可以看到，具体的日志信息比之前的信息更加完善：</p>
<pre><code>2020-09-24 20:11:59.078 [nioEventLoopGroup-3-1] INFO  io.netty.handler.logging.LoggingHandler [101] - [id: 0x2a5e5026, L:/0:0:0:0:0:0:0:0:8883] READ: [id: 0x926e140c, L:/127.0.0.1:8883 - R:/127.0.0.1:58920]
2020-09-24 20:11:59.078 [nioEventLoopGroup-3-1] INFO  io.netty.handler.logging.LoggingHandler [101] - [id: 0x2a5e5026, L:/0:0:0:0:0:0:0:0:8883] READ COMPLETE
2020-09-24 20:11:59.079 [nioEventLoopGroup-2-8] ERROR io.netty.util.ResourceLeakDetector [171] - LEAK: ByteBuf.release() was not called before it's garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for more information.
WARNING: 1 leak records were discarded because the leak record count is limited to 4. Use system property io.netty.leakDetection.maxRecords to increase the limit.
Recent access records: 5
#5:
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.readBytes(AdvancedLeakAwareCompositeByteBuf.java:476)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.readBytes(AdvancedLeakAwareCompositeByteBuf.java:36)
	com.jd.jr.keeplive.front.service.nettyServer.handler.LongRotationServerHandler.getClientMassageInfo(LongRotationServerHandler.java:169)
	com.jd.jr.keeplive.front.service.nettyServer.handler.LongRotationServerHandler.handleHttpFrame(LongRotationServerHandler.java:121)
	com.jd.jr.keeplive.front.service.nettyServer.handler.LongRotationServerHandler.channelRead(LongRotationServerHandler.java:80)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)
	io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)
	io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)
	io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86)
	......
#4:
	Hint: 'LongRotationServerHandler#0' will handle the message from this point.
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.touch(AdvancedLeakAwareCompositeByteBuf.java:1028)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.touch(AdvancedLeakAwareCompositeByteBuf.java:36)
	io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage.touch(HttpObjectAggregator.java:359)
	......
#3:
	Hint: 'HttpServerExpectContinueHandler#0' will handle the message from this point.
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.touch(AdvancedLeakAwareCompositeByteBuf.java:1028)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.touch(AdvancedLeakAwareCompositeByteBuf.java:36)
	io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage.touch(HttpObjectAggregator.java:359)
  ......
#2:
	Hint: 'HttpHeartbeatHandler#0' will handle the message from this point.
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.touch(AdvancedLeakAwareCompositeByteBuf.java:1028)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.touch(AdvancedLeakAwareCompositeByteBuf.java:36)
	io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage.touch(HttpObjectAggregator.java:359)
  ......
#1:
	Hint: 'IdleStateHandler#0' will handle the message from this point.
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.touch(AdvancedLeakAwareCompositeByteBuf.java:1028)
	io.netty.buffer.AdvancedLeakAwareCompositeByteBuf.touch(AdvancedLeakAwareCompositeByteBuf.java:36)
	io.netty.handler.codec.http.HttpObjectAggregator$AggregatedFullHttpMessage.touch(HttpObjectAggregator.java:359)
  ......
Created at:
	io.netty.util.ResourceLeakDetector.track(ResourceLeakDetector.java:237)
	io.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:217)
	io.netty.buffer.AbstractByteBufAllocator.compositeBuffer(AbstractByteBufAllocator.java:195)
	io.netty.handler.codec.MessageAggregator.decode(MessageAggregator.java:255)
  ......

</code></pre>
<p>开启高级的泄漏检测级别后，通过上面异常日志，我们可以看到内存泄漏的具体地方：<code>com.jd.jr.keeplive.front.service.nettyServer.handler.LongRotationServerHandler.getClientMassageInfo(LongRotationServerHandler.java:169)</code></p>
<p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-04-21-12-55B27QdD0EV6dXib12v.png" alt="内存泄漏代码快" loading="lazy"></p>
<p>不得不说<code>Netty</code>内存泄漏排查这点是真香！真香好评！</p>
<h1 id="问题解决">问题解决</h1>
<p>找到问题了，那我么就需要解决，如何释放<code>ByteBuf</code>内存呢？</p>
<h2 id="如何回收泄漏的bytebuf">如何回收泄漏的ByteBuf</h2>
<p>其实<code>Netty</code>官方也针对这个问题做了专门的讨论，一般的经验法则是，最后访问引用计数对象的一方负责销毁该引用计数对象，具体来说：</p>
<ul>
<li>
<p>如果一个[发送]组件将一个引用计数的对象传递给另一个[接收]组件，则发送组件通常不需要销毁它，而是由接收组件进行销毁。</p>
</li>
<li>
<p>如果一个组件使用了一个引用计数的对象，并且知道没有其他对象将再访问它（即，不会将引用传递给另一个组件），则该组件应该销毁它。</p>
</li>
</ul>
<p>详情请看翻译的Netty官方文档对引用计数的功能使用：</p>
<p><a href="http://sd.jd.com/article/13509?shareId=5032&amp;isHideShareButton=1" target="_blank" rel="noopener">【翻译】Netty的对象引用计数</a><br>
<a href="https://netty.io/wiki/reference-counted-objects.html" target="_blank" rel="noopener">【原文】Reference counted objects</a></p>
<p><strong>总结起来主要三个方式</strong>：<br>
<strong>方式一</strong>：手动释放，哪里使用了，使用完就手动释放。<br>
<strong>方式二</strong>：升级<code>ChannelHandler</code>为<code>SimpleChannelHandler</code>， 在<code>SimpleChannelHandler</code>中，<code>Netty</code>对收到的所有消息都调用了<code>ReferenceCountUtil.release（msg）</code>。<br>
<strong>方式三</strong>：如果处理过程中不确定<code>ByteBuf</code>是否应该被释放，那交给Netty的<code>ReferenceCountUtil.release（msg）</code>来释放，这个方法会判断上下文是否可以释放。</p>
<p>考虑到长连接前置应用使用的是<code>ChannelHandler</code>，如果升级<code>SimpleChannelHandler</code>对现有API接口变动比较大，同时如果手动释放，不确定是否应该释放风险也大，因此使用方式三，如下：</p>
<p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-04-21-12-57tnWsXnFJ12o7ywU.png" alt="修复代码" loading="lazy"></p>
<h2 id="线上实例内存正常">线上实例内存正常</h2>
<p>问题修复后，线上服务正常，内存使用率也没有再出现因泄漏而增长，从线上我们增加的日志中看出，<code>FullHttpRequest</code>中<code>ByteBuf</code>内存释放成功。<strong>从此长连接前置内存泄漏的问题彻底解决</strong>。</p>
<p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-04-19-09-40rnYcWW40TkPsjBD19.png" alt="线上服务内存释放成功" loading="lazy"></p>
<h1 id="总结">总结</h1>
<p><strong>一、Netty的内存泄漏排查其实并不难，Netty提供了比较完整的排查内存泄漏工具</strong></p>
<p>JVM 选项<code>-Dio.netty.leakDetection.level</code></p>
<p>目前有 4 个泄漏检测级别的：</p>
<ul>
<li>
<p>DISABLED - 完全禁用泄漏检测。<strong>不推荐</strong>。</p>
</li>
<li>
<p>SIMPLE - 抽样 1% 的缓冲区是否有泄漏。<strong>默认</strong>。</p>
</li>
<li>
<p>ADVANCED - 抽样 1% 的缓冲区是否泄漏，<strong>以及能定位到缓冲区泄漏的代码位置</strong>。</p>
</li>
<li>
<p>PARANOID - 与 ADVANCED 相同，只是它适用于每个缓冲区，<strong>适用于自动化测试阶段</strong>。如果生成输出包含“LEAK：”，则可能会使生成失败。</p>
</li>
</ul>
<p>本次内存泄漏问题，我们通过本地设置泄漏检测级别为高级，即：<code>-Dio.netty.leakDetectionLevel=advanced</code>定位到了具体内存泄漏的代码。</p>
<p>同时Netty也给出了<strong>避免泄漏的最佳实践</strong>：</p>
<ul>
<li>
<p>在 PARANOID 泄漏检测级别以及 SIMPLE 级别运行单元测试和集成测试。</p>
</li>
<li>
<p>在 SIMPLE 级别向整个集群推出应用程序之前，请先在相当长的时间内查看是否存在泄漏。</p>
</li>
<li>
<p>如果有泄漏，灰度发布中使用 ADVANCED 级别，以获得有关泄漏来源的一些提示。</p>
</li>
<li>
<p>不要将泄漏的应用程序部署到整个群集。</p>
</li>
</ul>
<p><strong>二、解决Netty内存泄漏，Netty也提供了指导方案，主要有三种方式</strong></p>
<p><strong>方式一</strong>：手动释放，哪里使用了，使用完就手动释放，<strong>这个对使用方要求比较高了</strong>。<br>
<strong>方式二</strong>：如果处理过程中不确定<code>ByteBuf</code>是否应该被释放，那交给<code>Netty</code>的<code>ReferenceCountUtil.release（msg）</code>来释放，这个方法会判断上下文中是否可以释放，<strong>简单方便</strong>。<br>
<strong>方式三</strong>：升级<code>ChannelHandler</code>为<code>SimpleChannelHandler</code>， 在SimpleChannelHandler中，Netty对收到的所有消息都调用了<code>ReferenceCountUtil.release（msg）</code>，<strong>升级接口，可能对现有API改动会比较大</strong>。</p>

</div>
<div class="clear"></div>
<div id="blog_post_info_block" role="contentinfo">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date" data-last-update-days="0.21645353803703704" data-date-created="BlogServer.Application.Dto.BlogPost.BlogPostDto" data-date-updated="2023-04-23 09:33">2023-04-23 09:33</span>&nbsp;
<a href="https://www.cnblogs.com/jingdongkeji/">京东云技术团队</a>&nbsp;
阅读(<span id="post_view_count">71</span>)&nbsp;
评论(<span id="post_comment_count">1</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=17345525" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(17345525);return false;">收藏</a>&nbsp;
<a href="javascript:void(0)" onclick="reportManager.report({ currentUserId: '', targetType: 'blogPost', targetId: '17345525', targetLink: 'https://www.cnblogs.com/jingdongkeji/p/17345525.html', title: '长连接Netty服务内存泄漏，看我如何一步步捉“虫”解决' })">举报</a>
</div>
        </div>
        
<script>
    var cb_entryId = 17345525, cb_entryCreatedDate = '2023-04-23 09:33', cb_postType = 1, cb_postTitle = '长连接Netty服务内存泄漏，看我如何一步步捉“虫”解决';
    var allowComments = true, cb_blogId = 777127, cb_blogApp = 'jingdongkeji', cb_blogUserGuid = '6495a241-2b03-43aa-10bc-08dacae1c884';
    mermaidRender.render()
    markdown_highlight()
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
    updatePostStats(
            [cb_entryId],
            function(id, count) { $("#post_view_count").text(count) },
            function(id, count) { $("#post_comment_count").text(count) })
</script>
        <a id="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
        <div id="cnblogs_ch"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
            <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
        var commentManager = new blogCommentManager();
        commentManager.renderComments(0);
        fixPostBody();
        window.footnoteTipManager.generateFootnoteTips();

            window.tocManager.displayDisableTocTips = false;
            window.tocManager.generateToc();
            
                setTimeout(function() { countViews(cb_blogId, cb_entryId); }, 50);
            
            deliverT2();
            deliverC1C2();
            loadNewsAndKb();
            
                LoadPostCategoriesTags(cb_blogId, cb_entryId);
            
            LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
            GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
            loadOptUnderPost();
            GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
                </script>
</div>

    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                <div id="sidebar_news" class="newsItem">
    
<h3 class="catListTitle">公告</h3>
<div id="blog-news">    
    <div id="sidebar_news_content">
    </div>
</div>
<script>loadBlogNews();</script> 
</div>
<div id="sidebar_c3"></div>
                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2023 京东云技术团队
<br /><span id="poweredby">Powered by .NET 7.0 on Kubernetes</span>

    </div>
</div>


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8M-opqJn5c1MsCC_BxLIULnLkx_3Yoyki5MOUjMkqcawBP6Al6HLDMWYZ23bjoN1MPvU5o7CIthRe9Y52J6hx1rM0YDnymYVvvOqGRFGhif_n4vPCWj0kN7aWNunRqDLHxFsiJuJlBZFwFDS-Pzh0ek" />
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-476124-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    var kv = getGACustom();
    if (kv) {
        gtag('set', kv);
    }
    gtag('config', 'UA-476124-1');
</script>
<script defer src="https://hm.baidu.com/hm.js?866c9be12d4a814454792b1fd0fed295"></script>
</body>
</html>